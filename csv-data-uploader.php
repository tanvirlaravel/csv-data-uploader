<?php 
/*
* Plugin Name: CSV Data Uploader
* Plugin URI:  https://www.csv-data-uploader.com
* Description: CSV Data Uploader
* Version:     1.0
* Author:      Tanvir
* Author URI:  https://github.com/tanvirlaravel
* License:     GPL2
* License URI: https://www.gnu.org/licenses/gpl-2.0.html
* Text Domain: csv-data-uploader
*/
/*
The plugin_dir_path() function in WordPress is used to retrieve the absolute path to the directory where a plugin is located. This path is relative to the WordPress installation directory.

Syntax:
plugin_dir_path( $file )
Use code with caution.

Parameters:
$file: The path to a file within the plugin directory. If not specified, the path to the current file being executed is used.

Return Value:
The absolute path to the plugin directory
*/
define("CDU_PLUGIN_DIR_PATH", plugin_dir_path( __FILE__ ));

// echo CDU_PLUGIN_DIR_PATH; die();
// C:\Users\Tanvir\Local Sites\wp-plugin-tutorial-youtube\app\public\wp-content\plugins\csv-data-uploader/

add_shortcode("csv-data-uploader", "cdu_display_uploader_form");

function cdu_display_uploader_form(){
    /*
    output in a buffer
    Output in a buffer refers to data that has been generated by a program but is temporarily stored in a designated memory area before being sent to its final destination. This destination can be a file, the network (e.g., a browser), or another device.

    Key points about output buffering:

    Temporary storage: Output is held in the buffer until it's ready to be flushed (sent) to its destination.
    Control and manipulation: Before flushing, the buffered output can be modified, filtered, or redirected.
    Efficiency: In some cases, output buffering can improve performance by reducing the number of I/O operations.
    Common use cases for output buffering:

    Capturing output: Store the generated output for later processing or display.
    Modifying output: Change the content, format, or structure of the output before sending it.
    Redirecting output: Send the output to a different destination, such as a file or a network socket.
    Creating custom output handlers: Define specific actions to be performed on the buffered output.
    */
    /*
    ob_start();
    The ob_start() function in PHP is used to initiate output buffering. When this function is called, all subsequent output generated by the script is captured and stored in a buffer instead of being sent directly to the browser. This allows you to manipulate or process the output before sending it to the user.

    Purpose:

    Control output: By capturing output in a buffer, you can modify, filter, or redirect it before it's displayed.
    Improve performance: In some cases, output buffering can improve performance by reducing the number of times data is sent to the browser.
    Create custom output handlers: You can define custom output handlers to perform specific actions on the buffered output before it's sent.
    */

    // Start PHP Buffer
    ob_start();

    include_once CDU_PLUGIN_DIR_PATH . "/template/cdu_form.php";  // put all content into buffer

    /*
    The ob_get_contents() function in PHP is used to retrieve the contents of the output buffer. This function is typically used after ob_start() to capture and manipulate the output generated by a script before it's sent to the browser.
    */
    // Read buffer
    $template  = ob_get_contents();

    /*
    The ob_end_clean() function in PHP is used to clean up the output buffer and discard its contents without sending them to the browser. This is typically done after retrieving the contents of the buffer using ob_get_contents().
    */
    // Clean buffer
    ob_end_clean();
    
    return  $template;
}

/*
The register_activation_hook() function in WordPress is used to register a callback function that will be executed when the plugin is activated. This is useful for performing tasks that need to be done only once when the plugin is first activated, such as creating default settings, creating custom tables, or importing data.

Parameters:

$file: The path to the plugin file.
$function: The callback function that will be executed when the plugin is activated.
*/
// DB table on plugin activation
register_activation_hook( __FILE__, 'cdu_create_table' );

function cdu_create_table(){
    global $wpdb;
    $table_prefix = $wpdb->prefix;
    $table_name = $table_prefix . "students_data";
    $table_collate = $wpdb->get_charset_collate();

    $sql_command = "
    CREATE TABLE `". $table_name ."` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `email` varchar(50) DEFAULT NULL,
  `age` int(5) DEFAULT NULL,
  `phone` varchar(30) DEFAULT NULL,
  `photo` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id`)
) " . $table_collate ."
    ";

  require_once(ABSPATH . "/wp-admin/includes/upgrade.php");
  dbDelta($sql_command);
}

// Add scripts file 
add_action( "wp_enqueue_scripts", "cdu_add_scripts_file" );

function cdu_add_scripts_file(){
    wp_enqueue_script("cdu-script", plugin_dir_url(__FILE__) . "assets/script.js", array("jquery"));
    wp_localize_script("cdu-script", "cdu_object", array(
        "ajax_url" => admin_url("admin-ajax.php"),
    ));
}

// Capture Ajax Request 
add_action("wp_ajax_cdu_submit_form_data", "cdu_ajax_handler");   // when user is logged in
add_action("wp_ajax_nopriv_cdu_submit_form_data", "cdu_ajax_handler"); // when use is not logged in

function cdu_ajax_handler(){
  // echo admin_url("admin-ajax.php"); die();
 if($_FILES['csv_data_file']){
  global $wpdb;
  $table_name = $wpdb->prefix . "students_data";

    $csvFile = $_FILES['csv_data_file']['tmp_name'];
    $handle = fopen($csvFile, 'r');

    

    if( $handle ){
      $row = 0;
        while( ($data = fgetcsv($handle, 1000)) !== false ){
          if($row == 0){
            $row++;
            continue;
          }
          // Insert data 
          $wpdb->insert($table_name, array(
            "name"    => $data[1],
            "email"    => $data[2],
            "age"      => $data[3],
            "phone"    => $data[4],
            "photo"    => $data[5],
          ));
        }

        fclose($handle);

        echo json_encode([
          "status"  => 1,
          "message" => "Data uploaded succefully in database"
        ]);
    }

 }else{

  echo json_encode( array(
    "status"  => 1,
    "message" => "Hello form CSV Data Uploader"
  ) );

 }

  // $data = $_POST['data'];
  //   wp_send_json_success($data);

  exit;
}